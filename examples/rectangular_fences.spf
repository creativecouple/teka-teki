%!PS-Adobe-3.0 EPSF-3.0
%%Pages: 1
%%BoundingBox: -1 -1 96 96
%%CropBox: -1 -1 96 96
%%DocumentData: Clean7Bit
%%Page: 1 1
%%EndComments
%----------------------------------------------
% This file is in Standard Puzzle Format (SPF)
%----------------------------------------------
/pgsave save def 200 dict begin
/sc 22.8 def
/pt {sc div} def
sc dup scale 0.09 0.09 translate
/duenn { 0.4 pt setlinewidth } def
/dick { 1 pt setlinewidth } def

<<
/format 1
/type (fences)
/sol false
/X 4
/Y 4
/puzzle [
(+-+-+-+-+)
(| |2|2|2|)
(+-+-+-+-+)
(|3|0|1| |)
(+-+-+-+-+)
(|2| | | |)
(+-+-+-+-+)
(|1|2| |3|)
(+-+-+-+-+) ]
/solution [
(+ +-+-+ +)
(  |   |  )
(+-+ + +-+)
(|       |)
(+-+ +-+-+)
(  | |    )
(+ + +-+-+)
(  |     |)
(+ +-+-+-+) ]
>> currentdict copy pop

/e { exch def } bind def
/l { 4 2 roll moveto lineto stroke } def
/c { dup 4 2 roll moveto
     stringwidth pop 2 div neg 0.5 add 0.25 rmoveto show } def

datatype (graph) eq {
  0 1 edge length 1 sub { /k e
    edge k get 0 get /x e
    edge k get 1 get /y e
    x y 0.09 0 360 arc fill
  } for

  0 1 border length 1 sub { /k e
    border k get 0 get /e1 e
    border k get 1 get /e2 e
    sol border k get 2 get and {
      dick
      edge e1 get 0 get edge e1 get 1 get moveto
      edge e2 get 0 get edge e2 get 1 get lineto
      stroke
    } {
      gsave
        0.02 setlinewidth [0.05 0.2] 0.01 setdash
        edge e1 get 0 get edge e1 get 1 get moveto
        edge e2 get 0 get edge e2 get 1 get lineto
        stroke
      grestore
    } ifelse
  } for

  /Helvetica findfont 18 pt scalefont setfont
  0 1 area length 1 sub { /k e
    area k get 0 get /x e
    area k get 1 get /y e
    area k get 2 get /nr e
    area k get 3 get /s e
    nr -1 ne {
      gsave
        x y translate
        stil s get concat
        nr 5 string cvs /c e
        c stringwidth pop 2 div neg -6.5 pt moveto c show
      grestore
    } if
  } for
} if

datatype (rectangle) eq {
  1 setgray
  0 0 X Y rectfill
  0 setgray

  0 1 X { /x e
    0 1 Y { /y e
      puzzle Y y sub 2 mul get x 2 mul get (+) 0 get eq {
        x y 0.09 0 360 arc fill
      } if
    } for
  } for

  ( ) 0 get /h1 e
  0 1 X { /x e
    0 1 Y 1 sub { /y e
      puzzle Y y sub 1 sub 2 mul 1 add get x 2 mul get /h e
      sol { solution Y y sub 1 sub 2 mul 1 add get x 2 mul get /h1 e } if
      sol h1 (|) 0 get eq and { (H) 0 get /h e } if
      h (|) 0 get eq {
        gsave
          0.02 setlinewidth [0.05 0.2] 0.01 setdash
          x y x y 1 add l
        grestore
      } if
      h (H) 0 get eq {
        dick
        x y x y 1 add l
      } if
    } for
  } for

  0 1 X 1 sub { /x e
    0 1 Y { /y e
      puzzle Y y sub 2 mul get x 2 mul 1 add get /h e
      sol { solution Y y sub 2 mul get x 2 mul 1 add get /h1 e } if
      sol h1 (-) 0 get eq and { (=) 0 get /h e } if
      h (-) 0 get eq {
        gsave
          0.02 setlinewidth [0.05 0.2] 0.01 setdash
          x y x 1 add y l
        grestore
      } if
      h (=) 0 get eq {
        dick
        x y x 1 add y l
      } if
    } for
  } for

  /Helvetica findfont 18 pt scalefont setfont
  0 1 X 1 sub { /x e
    0 1 Y 1 sub { /y e
      puzzle Y y sub 1 sub 2 mul 1 add get x 2 mul 1 add get /h e
      h 48 ge h 57 le and {
        x y h 48 sub 5 string cvs c
      } if
    } for
  } for

  1 1 X 1 sub { /x e
    1 1 Y 1 sub { /y e
      puzzle Y y sub 2 mul get x 2 mul get /h e
      h 48 ge h 57 le and {
        gsave
        x 1 sub y 1 sub translate
        2 2 scale
        0 0 h 48 sub 5 string cvs c
        grestore
      } if
    } for
  } for
} if

datatype (hexagonal) eq {
  % fehlt noch...
} if

end pgsave restore showpage
%%EOF
