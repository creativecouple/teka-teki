%!PS-Adobe-3.0 EPSF-3.0
%%Pages: 1
%%BoundingBox: 0 0 93 93
%%CropBox: 0 0 93 93
%%DocumentData: Clean7Bit
%%Page: 1 1
%%EndComments
%----------------------------------------------
% This file is in Standard Puzzle Format (SPF)
%----------------------------------------------
/pgsave save def 200 dict begin
/sc 22.8 def
/pt {sc div} def
sc dup scale 0.8 pt dup translate
/duenn { 0.4 pt setlinewidth } def
/dick { 1.6 pt setlinewidth } def

<<
/format 1
/type (hitori)
/sol false
/X 4
/Y 4
/digits 2
/puzzle [
( 9 6 6  )
( 9   9  )
(    12  )
( 3 312##) ]
/solution [
(..#.)
(#...)
(..#.)
(#..#) ]
>> currentdict copy pop

/e { exch def } bind def
/l { 4 2 roll moveto lineto stroke } def
/c { dup 4 2 roll moveto 
     stringwidth pop 2 div neg 0.5 add 0.25 rmoveto show } def

currentdict /digits known not { /digits 1 def } if

1 setgray
0 0 X Y rectfill
0 setgray

2 setlinecap
dick 
0 0 X Y rectstroke

duenn 
0 1 X { /i e i 0 i Y l } for
0 1 Y { /j e 0 j X j l } for

/getNr {
  /x e /line e
  line x digits add 1 sub get /last e
  last ( ) 0 get ne last (#) 0 get ne and {
    /val 0 def
    0 1 digits 1 sub { /ii e
      line x ii add get /hh e
      hh ( ) 0 get eq { /hh (0) 0 get def } if
      /val val 10 mul hh (0) 0 get sub add def
    } for
    val
  } {
    line x digits add 1 sub get (#) 0 get eq { -2 } { -1 } ifelse
  } ifelse
} def

/Helvetica-Bold findfont 0.65 scalefont setfont
0 1 X 1 sub { /i e
  0 1 Y 1 sub { /j e
    puzzle Y j sub 1 sub get i digits mul getNr /h e
    h -2 eq {
      i j 1 1 rectfill
    } {
      h -1 ne {
        i j h digits string cvs c
      } if
    } ifelse
  } for
} for

sol {
  0 1 X 1 sub { /i e
    0 1 Y 1 sub { /j e
      solution Y j sub 1 sub get i get /h e
      h (#) 0 get eq {
        i j 1 1 rectfill
      } if
    } for
  } for
} if

end pgsave restore showpage
%%EOF
